geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
my.formula = pred_p$Predicted.value ~ pred_p$True.Value
my.formula
install.packages(ggpmic)
install.packages(ggpmisc)
install.packages("ggpmisc")
??stat_poly_eq
install.packages("ggpmisc")
library
library(ggpmisc)
install.packages("ggpp")
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
####glmms
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
install.packages(ggpubr)
install.packages("ggpubr")
install.packages("MASS")
library(ggpubr)
pred_p <- rbind(pred_WS_W, pred_Net_W, predxWS_W, predxNet_W)
pred_WS_W <- pred_num("WashedStatus + Location ",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper")
###Plot the predicted categorical mean and actual mean
pred_WS_W <- pred_num("WashedStatus + Location ",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
model_5_2 <- glmer.nb(formula = Count~Location + WashedStatus + (1|Sleeper)  + (1|Week) , data = n_mos)
summary(model_5_2)
###Plot the predicted categorical mean and actual mean
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_num <- function(model_name, data, mod, fix_eff, rand_eff){
Loc_levels <- levels(data$Location)
nLoc <- length(Loc_levels)
ns <- length(levels(data$Sleeper))
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
l <- matrix(data = NA, ncol = 4, nrow = 0)
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper+Week"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
nw <- length(levels(n_mos$Week))
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns*nw)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link",  re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
for (i in 1:nLoc) {
for (j in 1:nN){
k <- matrix(data = NA, ncol = 4, nrow = ns)
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper+Week"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
nw <- length(levels(n_mos$Week))
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns*nw)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
l[,1] <- rep(model_name, nrow(l))
colnames(l) <- c("Model", "Category", "Predicted.value", "True.Value")
l <- as.data.frame(l)
l[,3] <- round(as.double(l[,3]),2)
l[,4] <- round(as.double(l[,4]),2)
return(l)
}
###Plot the predicted categorical mean and actual mean
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_num <- function(model_name, data, mod, fix_eff, rand_eff){
Loc_levels <- levels(data$Location)
nLoc <- length(Loc_levels)
ns <- length(levels(data$Sleeper))
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
l <- matrix(data = NA, ncol = 4, nrow = 0)
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper+Week"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
nw <- length(levels(data$Week))
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns*nw)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link",  re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
for (i in 1:nLoc) {
for (j in 1:nN){
k <- matrix(data = NA, ncol = 4, nrow = ns)
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper+Week"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
nw <- length(levels(data$Week))
for (i in 1:nLoc) {
for (j in 1:nWS){
k <- matrix(data = NA, ncol = 4, nrow = ns*nw)
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),6)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[,4] <- rep(as.numeric(t), 6)
l <- rbind(l,k)
}
}
}
l[,1] <- rep(model_name, nrow(l))
colnames(l) <- c("Model", "Category", "Predicted.value", "True.Value")
l <- as.data.frame(l)
l[,3] <- round(as.double(l[,3]),2)
l[,4] <- round(as.double(l[,4]),2)
return(l)
}
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
a <- predict(model_5_5, data.frame(Sleeper = factor(levels(n_mos$Sleeper), levels = levels(n_mos$Sleeper)),
Week = factor(levels(n_mos$Week), levels = levels(n_mos$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
Treatment_levels <- levels(n_mos$Treatment)
a <- predict(model_5_5, data.frame(Sleeper = factor(levels(n_mos$Sleeper), levels = levels(n_mos$Sleeper)),
Week = factor(levels(n_mos$Week), levels = levels(n_mos$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
Loc_levels
Treatment_levels
model_5_5 <- glmer.nb(formula = Count~Location + Treatment + Location*Treatment+
(1|Sleeper)  + (1|Week), data = n_mos)
summary(model_5_3)
model_5_3 <- glmer.nb(formula = Count~Treatment + Location + (1|Sleeper)  + (1|Week) , data = n_mos)
summary(model_5_3)
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_p_W <- rbind(pred_WS_W, pred_Net_W, predxWS_W, predxNet_W)
View(pred_p_W)
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
install.packages("merTools")
install.packages("merTools")
install.packages("merTools")
install.packages("merTools")
install.packages("merTools")
install.packages("merTools")
library(merTools)
install.packages("ggpubr")
library(ggpubt)
library(ggpubr)
my.formula = pred_p$Predicted.value ~ pred_p$True.Value
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
install.packages("ggpmisc")
library(ggpmisc)
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
library(merTools)
library(ggpubr)
help("predictInterval")
Loc_levels
WS_levels
predictInterval(model_4_4, data.frame(Sleeper = factor(levels(n_mos$Sleeper), levels = levels(n_mos$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "linear.prediction", level =  0.95)
i
j
LocationxWS <- getcoefsde(model_4_4, "Location+WashedStatus+Location*WashedStatus")
View(LocationxWS)
predxWS <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_4_4, fix_eff = "WashedStatus", rand_eff = "Sleeper")
View(predxWS)
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
library(merTools)
library(ggpubr)
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
library(ggpmisc)
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = y ~x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Net + Location + Net * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_p_W <- rbind(pred_WS_W, pred_Net_W, predxWS_W, predxNet_W)
View(pred_p_W)
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
###Plot the predicted categorical mean and actual mean
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_p_W <- rbind(pred_WS_W, pred_Net_W, predxWS_W, predxNet_W)
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
pred_WS <- pred_num("WashedStatus + Location ",
data = n_mos, mod = model_4_2, fix_eff = "WashedStatus", rand_eff = "Sleeper")
pred_Net <- pred_num("Treatment + Location",
data = n_mos, mod = model_4_3, fix_eff = "Treatment", rand_eff = "Sleeper")
predxWS <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_4_4, fix_eff = "WashedStatus", rand_eff = "Sleeper")
predxNet <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_4_5, fix_eff = "Treatment", rand_eff = "Sleeper")
pred_p <- rbind(pred_WS, pred_Net, predxWS, predxNet)
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = y ~x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
help("ggsave")
ggplot(pred_p, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
stat_poly_eq(formula = y ~x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggsave("Model comparisons with random effect of Sleeper.jpeg", device = 'jpeg')
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point() + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted value of the models with random effect of Sleeper and Week",
x = "True value", y = "Predicted value")+
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggsave("Model comparisons with random effect of Sleeper and Week.jpeg", device = 'jpeg')
View(n_mos)
View(Tengrela_R1A_rm)
