k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link", re.form = NULL)
k[1:ns,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[1:ns,4] <- rep(as.numeric(t), ns)
l <- rbind(l,k)
}
}
}
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper+Week"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
nw <- length(levels(data$Week))
n <- ns*nw
for (i in 1:nLoc) {
for (j in 1:nWS){
t <- data %>%
subset(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]), len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link",  re.form = NULL)
k[1:n,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[1:n,4] <- rep(as.numeric(t), n)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
for (i in 1:nLoc) {
for (j in 1:nT){
t <- data %>%
subset(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[1:ns,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[1:ns,4] <- rep(as.numeric(t), ns)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper+Week"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
nw <- length(levels(data$Week))
n <- ns*nw
for (i in 1:nLoc) {
for (j in 1:nT){
t <- data %>%
subset(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
a <- exp(a)
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),len)
k[1:n,3] <- a
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[1:n,4] <- rep(as.numeric(t), n)
l <- rbind(l,k)
}
}
}
l[,1] <- rep(model_name, nrow(l))
colnames(l) <- c("Model", "Category", "Predicted.value", "True.Mean", "True.value")
l <- as.data.frame(l)
l[,3] <- round(as.double(l[,3]),2)
l[,4] <- round(as.double(l[,4]),2)
l[,4] <- as.double(l[,4])
return(l)
}
pred_num <- function(model_name, data, mod, fix_eff, rand_eff){
Loc_levels <- levels(data$Location)
nLoc <- length(Loc_levels)
l <- matrix(data = NA, ncol = 5, nrow = 0)
ns <- length(levels(data$Sleeper))
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
for (i in 1:nLoc) {
for (j in 1:nWS){
t <- data %>%
subset(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]),len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link", re.form = NULL)
k[1:ns,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[1:ns,4] <- rep(as.numeric(t), ns)
l <- rbind(l,k)
}
}
}
if (fix_eff == "WashedStatus" & rand_eff == "Sleeper+Week"){
WS_levels <- levels(data$WashedStatus)
nWS <- length(levels(data$WashedStatus))
nw <- length(levels(data$Week))
n <- ns*nw
for (i in 1:nLoc) {
for (j in 1:nWS){
t <- data %>%
subset(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
k[,2] <- rep(paste(Loc_levels[i],"x",WS_levels[j]), len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
WashedStatus = factor(rep(WS_levels[j],6), levels = WS_levels)),
type = "link",  re.form = NULL)
k[1:n,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & WashedStatus == WS_levels[j]) %>%
summarise(tv = mean(Count))
k[1:n,4] <- rep(as.numeric(t), n)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
for (i in 1:nLoc) {
for (j in 1:nT){
t <- data %>%
subset(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),len)
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
k[1:ns,3] <- exp(a)
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[1:ns,4] <- rep(as.numeric(t), ns)
l <- rbind(l,k)
}
}
}
if (fix_eff == "Treatment" & rand_eff == "Sleeper+Week"){
Treatment_levels <- levels(data$Treatment)
nT <- length(levels(data$Treatment))
nw <- length(levels(data$Week))
n <- ns*nw
for (i in 1:nLoc) {
for (j in 1:nT){
t <- data %>%
subset(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
dplyr::select(Count)
t <- as.data.frame(t)
len <- nrow(t)
k <- matrix(data = NA, ncol = 5, nrow = len)
k[,5] <- t[,1]
a <- predict(mod, data.frame(Sleeper = factor(levels(data$Sleeper), levels = levels(data$Sleeper)),
Week = factor(levels(data$Week), levels = levels(data$Week)),
Location = factor(rep(Loc_levels[i],6), levels = Loc_levels),
Treatment = factor(rep(Treatment_levels[j],6), levels = Treatment_levels)),
type = "link", re.form = NULL)
a <- exp(a)
k[,2] <- rep(paste(Loc_levels[i],"x",Treatment_levels[j]),len)
k[1:n,3] <- a
t <- data %>%
filter(Location == Loc_levels[i] & Treatment == Treatment_levels[j]) %>%
summarise(tv = mean(Count))
k[1:n,4] <- rep(as.numeric(t), n)
l <- rbind(l,k)
}
}
}
l[,1] <- rep(model_name, nrow(l))
colnames(l) <- c("Model", "Category", "Predicted.value", "True.Mean", "True.value")
l <- as.data.frame(l)
l[,3] <- round(as.double(l[,3]),2)
l[,4] <- round(as.double(l[,4]),2)
l[,5] <- as.double(l[,5])
return(l)
}
pred_WS <- pred_num("WashedStatus + Location ",
data = n_mos, mod = model_4_2, fix_eff = "WashedStatus", rand_eff = "Sleeper")
pred_Net <- pred_num("Treatment + Location",
data = n_mos, mod = model_4_3, fix_eff = "Treatment", rand_eff = "Sleeper")
predxWS <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_4_4, fix_eff = "WashedStatus", rand_eff = "Sleeper")
predxNet <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_4_5, fix_eff = "Treatment", rand_eff = "Sleeper")
pred_WS_W <- pred_num("WashedStatus + Location",
data = n_mos, mod = model_5_2, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
pred_Net_W <- pred_num("Treatment + Location",
data = n_mos, mod = model_5_3, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
predxNet_W <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
pred_p_W <- rbind(pred_WS_W, pred_Net_W, predxWS_W, predxNet_W)
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category, fill = Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue', dotsize = 0.5)+
geom_boxplot(aes(y=Predicted.value), color = 'red')
View(pred_p_W)
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y = True.value, fill = Category), color = 'steelblue', dotsize = 0.5)+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y = True.value, fill = Category), color = 'steelblue', dotsize = 0.5)+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue', dotsize = 0.5)+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), color = 'red')
predxNet_W$True.value
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x=Category))+
geom_dotplot(aes(y=True.value), color = 'steelblue', binwidth = 1)+
geom_boxplot(aes(y=Predicted.value), color = 'red')
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_dotplot(aes(y = True.value))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category, fill = Category))+
geom_point(aes(y = True.value))+
geom_boxplot(aes(y=Predicted.value))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category, fill = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True value/predicted values")
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True value/predicted values")+
theme(axis.title.x = element_text(angle = 90))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True value/predicted values")+
theme(axis.text.x = element_text(angle = 90))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True value/predicted values")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_point(aes(y=True.value), fill = 'yellow')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_point(aes(y=True.Mean), fill = 'yellow')+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_point(aes(y=True.Mean), fill = 'red', size = 3)+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_dotplot(aes(y=True.Mean), fill = 'red', size = 3)+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_point(aes(y=True.Mean), fill = 'red', size = 3)+
labs(title = "Best model estimates and true values plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
###Plot the predicted values from the best model and the corresponding true values
ggplot(predxNet_W, aes(x = Category))+
geom_point(aes(y = True.value), color = 'steelblue')+
geom_boxplot(aes(y=Predicted.value), fill = 'seagreen')+
geom_point(aes(y=True.Mean), fill = 'red', size = 3)+
labs(title = "Best model estimates vs read data plot : Treatment + Location + Treatment * Location",
y= "True/predicted number of mosquitoes")+
theme(axis.text.x = element_text(angle = 90, size = 12),
plot.title = element_text(size = 17, hjust = 0.5),
axis.title.y = element_text(size = 15),
axis.title.x = element_text(size = 15))
help("ggsave")
ggsave("Best model estimates vs read data plot : Treatment + Location + Treatment x Location.jpeg",
device = "jpeg")
ggsave("Best model estimates vs read data plot : Treatment + Location + Treatment x Location.jpeg",
device = "jpeg", width = 11, height = 9)
ggsave("Best model estimates vs read data plot : Treatment + Location + Treatment x Location.jpeg",
device = "jpeg", width = 12, height = 9)
View(n_mos)
View(n_mos)
model_1_5 <- glm.nb(formula = Count~Nets, data = n_mos)
summary(model_1_5)
####Data to model for variables other than Location
n_mos_wt_Loc <- n_mos %>%
distinct(Date,Treatment,Total, .keep_all = TRUE)
View(n_mos_wt_Loc)
model_1_2 <- glm.nb(formula = Total~WashedStatus, data = n_mos_wt_Loc)
summary(model_1_2)
model_1_3 <- glm.nb(formula = Total~Treatment, data = n_mos_wt_Loc)
summary(model_1_3)
model_1_4 <- glm.nb(formula = Total~Insecticide, data = n_mos_wt_Loc)
summary(model_1_4)
model_1_5 <- glm.nb(formula = Total~Nets, data = n_mos_wt_Loc)
summary(model_1_5)
#####Boxplot: 6 vs 4
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(y=Treatment))+
geom_boxplot(aes(y=Nets))
View(n_mos_wt_Loc)
#####Boxplot: 6 vs 4
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(y=Treatment))
#####Boxplot: 6 vs 4
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment))+
geom_boxplot(aes(x=Nets))
#####Boxplot: 6 vs 4
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment))
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Nets))
#####Boxplot: 6 vs 4
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment))+
ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Nets))
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")
b <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Nets))+
labs(title = "Boxplot of number of mosquitoes by types of Nets")
a+b
model_2_1 <- glm.nb(formula = Count~Location + WashedStatus, data = n_mos)
library(patchwork)
a+b
b <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Nets))+
labs(title = "Boxplot of number of mosquitoes by types of Nets")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
a+b
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total, fill = Nets))+
geom_boxplot(aes(x=Treatment))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
b <- ggplot(n_mos_wt_Loc, aes(y=Total, fill = Nets))+
geom_boxplot(aes(x=Nets))+
labs(title = "Boxplot of number of mosquitoes by types of Nets")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
a+b
ggsave("Number of mosquitoes found in the hut by different treatment/nets.jpeg", device = "jpeg")
ggsave("Number of mosquitoes found in the hut by different treatment or nets.jpeg", device = "jpeg")
b <- ggplot(n_mos_wt_Loc, aes(y=Total, fill = Nets))+
geom_boxplot(aes(x=Nets))+
labs(title = "Boxplot of number of mosquitoes by types of Nets")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment, fill = Nets))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
a
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment), fill = Nets)+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment, fill = Nets))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5),
legeng.position = "none")
a
#####Boxplot: 6 vs 4
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment, fill = Nets))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5),
legend.position = "none")
a
a <- ggplot(n_mos_wt_Loc, aes(y=Total))+
geom_boxplot(aes(x=Treatment, fill = Nets))+
labs(title = "Boxplot of number of mosquitoes by different ITNs")+
theme(plot.title = element_text(size = 12, hjust = 0.5),
legend.position = "none")
b <- ggplot(n_mos_wt_Loc, aes(y=Total, fill = Nets))+
geom_boxplot(aes(x=Nets))+
labs(title = "Boxplot of number of mosquitoes by types of Nets")+
theme(plot.title = element_text(size = 12, hjust = 0.5))
a+b
ggsave("Number of mosquitoes found in the hut by different treatment or nets.jpeg", device = "jpeg")
ggsave("Number of mosquitoes found in the hut by different treatment or nets.jpeg",
device = "jpeg", width = 10, height = 9)
