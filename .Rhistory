scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, centre = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, centre = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))
scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Histogram of mortality of mosquitoes by Treatment.jpeg", device = jpeg)
ggsave("Frequency line graph of mortality of mosquitoes by Location and Treatment.jpeg",
device = jpeg)
ggplot(m_mos, aes(x=Mortality))+
geom_freqpoly(aes(color = Treatment), binwidth = 0.2)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality))+
geom_freqpoly(aes(color = Location), binwidth = 0.2)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Frequency line graph of mortality of mosquitoes by Location and Treatment.jpeg",
device = jpeg)
ggplot(m_mos, aes(x=Mortality))+
geom_freqpoly(aes(color = Location, after_stat(density)), binwidth = 0.2)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
scale_x_continuous(limits = c(0,1))
scale_x_continuous(limits = c(0,1))
theme(plot.title = element_text(size=13, hjust = 0.5))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location,  binwidth = 0.2))+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location))+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 500)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 50)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location))+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Density graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Density graph of mortality of mosquitoes by Location and Treatment.jpeg",
device = jpeg)
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment, after_stat(density)))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Histogram of mortality of mosquitoes by Treatment.jpeg", device = jpeg,
width = 8, height = 5.5)
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment, after_stat(density)))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Histogram of mortality of mosquitoes by Treatment.jpeg", device = jpeg,
width = 8, height = 5.5)
ggplot(m_mos, aes(x=Mortality, after_stat(density)))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Density graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Density graph of mortality of mosquitoes by Location and Treatment.jpeg",
device = jpeg, width = 8, height = 5.5)
###Plot the data to find the appropriate distribution for the data
ggplot(m_mos, aes(x=Mortality, fill = Treatment))+
geom_histogram(binwidth = 0.1, boundary = 0, alpha=0.5)+
geom_freqpoly(aes(color = Treatment), binwidth = 0.1, boundary = 0)+
facet_wrap(vars(Treatment))+
labs(title  = "Histogram and line graph of mortality of mosquitoes by Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Histogram and line graph of mortality of mosquitoes by Treatment.jpeg", device = jpeg,
width = 8, height = 5.5)
ggplot(m_mos, aes(x=Mortality))+
geom_freqpoly(aes(color = Location),binwidth = 0.1)+
facet_wrap(vars(Treatment))+
labs(title = "Frequency line graph of mortality of mosquitoes by Location and Treatment")+
theme(plot.title = element_text(size=13, hjust = 0.5))+
scale_x_continuous(limits = c(0,1))
ggsave("Frequency line graph of mortality of mosquitoes by Location and Treatment.jpeg",
device = jpeg, width = 8, height = 5.5)
help("glm")
####Run logistic regression for the mortality
####Model 0
mor_0 <- glm(Mortality~., data = m_mos, family = binomial)
####Run logistic regression for the mortality
####Model 0
mor_0 <- glm(Mortality~0, data = m_mos, family = binomial)
####Run logistic regression for the mortality
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = binomial)
####Run logistic regression for the mortality
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = binomial)
####Run logistic regression for the mortality
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = binomial("logit"))
summary(mor_0)
####Model 1
##Add in Location and Treatment
mor_1 <- glm(Mortality~Location+Treatment, data = m_mos, family = binomial("logit"))
summary(mor_1)
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = gamma("logit"))
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = quasibinomial("logit"))
summary(mor_0)
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = poisson("log"))
warnings()
summary(mor_0)
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = quasipoisson("log"))
summary(mor_0)
####Model 0
mor_0 <- glm(Mortality~1, data = m_mos, family = binomial("log"))
summary(mor_1)
###Variables: Location and Treatment with interactions
mor_1 <- glm(Mortality~Location+Treatment + Location*Treatment,
data = m_mos, family = binomial("logit"))
summary(mor_1)
###Mixed effect model
####Model 2
##Random effect: individual random effect (per hut per night)
mor_1_ran <- glmer(Mortality~Location+Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
###Mixed effect model
####Model 2
##Random effect: individual random effect (per hut per night)
mor_1_ran <- glmer(Mortality~Location+Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_1_ran)
summary(mor_1)
####Model 1
###Variables: Location and Treatment
mor_1 <- glm(Mortality~Location+Treatment, data = m_mos, family = binomial("logit"))
###Variables: Location and Treatment with interactions
mor_2 <- glm(Mortality~Location+Treatment + Location*Treatment,
data = m_mos, family = binomial("logit"))
mor_2_ran <- glmer(Mortality~Location+Treatment + + Location*Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_2_ran)
mor_2_ran <- glmer(Mortality~Location+Treatment + + Location*Treatment + (1|marker),
data = m_mos, family = binomial("logit"), REML = FALSE)
nrow(m_mos)
m_mos <- m_mos %>%
mutate(id = seq(1, nrow(m_mos),1))
View(m_mos)
mor_2_ran <- glmer(Mortality~Location+Treatment + + Location*Treatment + (1|id),
data = m_mos, family = binomial("logit"))
###Barplot of average number of mosquito in each location by Treatment (With/without errorbar)
n_mos %>%
group_by(Treatment, Location) %>%
summarise(Avg = mean(Count), max = max(Count), min = min(Count)) %>%
ggplot(aes(x = Location, y = Avg, color = Location))+
geom_col(aes(fill= Location))+
#geom_errorbar(aes(x=Location, ymin=min, ymax= max), color = 'steelblue')+
facet_wrap(vars(Treatment))+
labs(title = "Average number of mosquitoes in each location by treatment")+
theme(plot.title = element_text(hjust = 0.5, size = 12.5),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
strip.text = element_text(size = 10))
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
library(merTools)
library(ggpubr)
library(ggpmisc)
###Barplot of average number of mosquito in each location by Treatment (With/without errorbar)
n_mos %>%
group_by(Treatment, Location) %>%
summarise(Avg = mean(Count), max = max(Count), min = min(Count)) %>%
ggplot(aes(x = Location, y = Avg, color = Location))+
geom_col(aes(fill= Location))+
#geom_errorbar(aes(x=Location, ymin=min, ymax= max), color = 'steelblue')+
facet_wrap(vars(Treatment))+
labs(title = "Average number of mosquitoes in each location by treatment")+
theme(plot.title = element_text(hjust = 0.5, size = 12.5),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
strip.text = element_text(size = 10))
ggsave("Average number of mosquitoes by treatment and location.jpeg",
width = 9, height = 6.5)
ggsave("Average of number of mosquitoes by treatment and location.jpeg",
width = 8, height = 5.5)
##AIC: 578.8
mor_0_ran <- glmer(Mortality~(1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_0_ran)
mor_0_ran <- glmer(Mortality~(1|id),
data = m_mos, family = binomial("logit"))
summary(mor_0_ran)
##AIC: 578.8
mor_0_ran <- glmer(Mortality~(1|marker),
data = m_mos, family = binomial("logit"))
mor_0 <- glm(Mortality~1, data = m_mos, family = binomial("log"))
summary(mor_0)
mor_0_ran <- glmer(Mortality~(1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_0_ran)
mor_1 <- glm(Mortality~Location+Treatment, data = m_mos, family = binomial("logit"))
summary(mor_1)
###Variables: Location and Treatment with interactions
mor_2 <- glm(Mortality~Location+Treatment + Location*Treatment,
data = m_mos, family = binomial("logit"))
summary(mor_1)
mor_2 <- glm(Mortality~Location+Treatment + Location*Treatment,
data = m_mos, family = binomial("logit"))
summary(mor_2)
summary(mor_1)
mor_1_q <- glm(Mortality~Location+Treatment, data = m_mos, family = quasibinomial("logit"))
summary(mor_1_q)
mor_2_q <- glm(Mortality~Location+Treatment + Location*Treatment,
data = m_mos, family = quasibinomial("logit"))
summary(mor_2_q)
###Mixed effect model
##Random effect: individual random effect (per hut per night)
mor_1_ran <- glmer(Mortality~Location+Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_1_ran)
mor_1_ran_q <- glmer(Mortality~Location+Treatment + (1|marker),
data = m_mos, family = quasibinomial("logit"))
summary(mor_1_ran_q)
mor_2_ran <- glmer(Mortality~Location+Treatment + + Location*Treatment + (1|id),
data = m_mos, family = binomial("logit"))
summary(mor_2_ran)
summary(mor_2)
mor_2_ran <- glmer(Mortality~Location+Treatment +  Location*Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_2_ran)
###Mixed effect model
##Random effect: individual random effect (per hut per night)
mor_1_ran <- glmer(Mortality~Location+Treatment + (1|marker),
data = m_mos, family = binomial("logit"))
summary(mor_1_ran)
ggplot(pred_p_W, aes(x = True.Value, y=Predicted.value))+
geom_point(color = 'steelblue') + facet_wrap(~Model) +
geom_smooth(formula = y~ x, method = "lm", se = FALSE, color = 'orange') +
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE,  color = 'orange')+
geom_abline(slope = 1, intercept = 0, linetype = 2, size = 1)+
labs(title = "Predicted number of mosquitoes and the best fit line from models with random effect of Sleeper and Week",
x = "True value", y = "Predicted number of mosquitoes")+
theme(plot.title = element_text(hjust = 0.5, size = 12.5),
axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13),
strip.text = element_text(size = 10))
predxNet_W <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
View(predxNet_W)
predxNet_W <- pred_num("Treatment + Location + Treatment * Location",
data = n_mos, mod = model_5_5, fix_eff = "Treatment", rand_eff = "Sleeper+Week")
predxWS_W <- pred_num("WashedStatus + Location + WashedStatus * Location",
data = n_mos, mod = model_5_4, fix_eff = "WashedStatus", rand_eff = "Sleeper+Week")
View(predxNet_W)
View(m_mos)
data<-m_mos
data[1, c("Village", "Date", "Treatment", "Location", "Dead", "Hut", "Sleeper", "marker")]
data[1, c("Village", "Date", "Treatment", "Location", "Hut", "Sleeper", "marker")]
data[rep(i, data[i, "Dead.Room"]), c("Village", "Date", "Treatment", "Location", "Hut", "Sleeper", "marker")]
i <- 1
data[rep(i, data[i, "Dead.Room"]), c("Village", "Date", "Treatment", "Location", "Hut", "Sleeper", "marker")]
data[i, "Dead.Room"]
data[rep(i, 4), c("Village", "Date", "Treatment", "Location", "Hut", "Sleeper", "marker")]
i <- 1
i <- 11
n_dr <- data[i, "Dead.Room"]
n_dr
data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")]
data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)
)
cbind(data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)))
data[rep(1, 10), "Location"]
i
i <- 1
n_dr <- data[i, "Dead.Room"]
n_ar <- data[i, "Tot.Room"] - n_dr
a <- cbind(data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)))
b <- cbind(data[rep(i, n_ar), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_ar), "Dead" = rep(0, n_ar)))
n_dn <- data[i, "Dead.Net"]
n_dr <- data[i, "Dead.Room"]
n_dr
data[i, "Tot.Room"] - n_dr
data[i, "Total.Room"] - n_dr
data[i, "Total.Room"]
n_dr
n_dr <- data[i, "Dead.Room"]
n_ar <- data[i, "Total.Room"] - n_dr
a <- cbind(data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)))
b <- cbind(data[rep(i, n_ar), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_ar), "Dead" = rep(0, n_ar)))
n_dn <- data[i, "Dead.Net"]
n_an <- data[i, "Total.Net"] - n_dn
c <- cbind(data[rep(i, n_dn), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_dn), "Dead" = rep(1, n_dn)))
d <- cbind(data[rep(i, n_an), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_an), "Dead" = rep(0, n_an)))
n_dv <- data[i, "Dead.Ver"]
n_av <- data[i, "Total.Ver"] - n_dv
e <- cbind(data[rep(i, n_dv), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_dv), "Dead" = rep(1, n_dv)))
f <- cbind(data[rep(i, n_av), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_av), "Dead" = rep(0, n_av)))
p <- rbind(a,b,c,d,e,f)
nrow(p)
i
out <- rbind(out, p)
out <- data.frame(Village = character(),
Date  = as.Date(character()),
Treatment = character(),
Location = character(),
Dead = integer(),
Hut= character(),
Sleeper= character(),
marker = integer())
out <- rbind(out, p)
out
out <- data.frame(Village = character(),
Date  = as.Date(character()),
Treatment = character(),
Location = character(),
Dead = integer(),
Hut= character(),
Sleeper= character(),
marker = integer())
data <- subset(data, Location == "Room")
for (i in 1: nrow(data)){
n_dr <- data[i, "Dead.Room"]
n_ar <- data[i, "Total.Room"] - n_dr
a <- cbind(data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)))
b <- cbind(data[rep(i, n_ar), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_ar), "Dead" = rep(0, n_ar)))
n_dn <- data[i, "Dead.Net"]
n_an <- data[i, "Total.Net"] - n_dn
c <- cbind(data[rep(i, n_dn), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_dn), "Dead" = rep(1, n_dn)))
d <- cbind(data[rep(i, n_an), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_an), "Dead" = rep(0, n_an)))
n_dv <- data[i, "Dead.Ver"]
n_av <- data[i, "Total.Ver"] - n_dv
e <- cbind(data[rep(i, n_dv), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_dv), "Dead" = rep(1, n_dv)))
f <- cbind(data[rep(i, n_av), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_av), "Dead" = rep(0, n_av)))
p <- rbind(a,b,c,d,e,f)
out <- rbind(out, p)
}
nrow(out)
sum(data$Total)
sum(m_mos$Dead.Tot)
sum(data$Dead.Tot)
sum(out$Dead)
rm(list = c(a,b,c,d,e,f,p))
rm(list = c("a","b","c","d","e","f","p"))
a
####
gen_mo <- function(data){
out <- data.frame(Village = character(),
Date  = as.Date(character()),
Treatment = character(),
Location = character(),
Dead = integer(),
Hut= character(),
Sleeper= character(),
marker = integer())
data <- subset(data, Location == "Room")
for (i in 1: nrow(data)){
n_dr <- data[i, "Dead.Room"]
n_ar <- data[i, "Total.Room"] - n_dr
a <- cbind(data[rep(i, n_dr), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_dr), "Dead" = rep(1, n_dr)))
b <- cbind(data[rep(i, n_ar), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Room", n_ar), "Dead" = rep(0, n_ar)))
n_dn <- data[i, "Dead.Net"]
n_an <- data[i, "Total.Net"] - n_dn
c <- cbind(data[rep(i, n_dn), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_dn), "Dead" = rep(1, n_dn)))
d <- cbind(data[rep(i, n_an), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Net", n_an), "Dead" = rep(0, n_an)))
n_dv <- data[i, "Dead.Ver"]
n_av <- data[i, "Total.Ver"] - n_dv
e <- cbind(data[rep(i, n_dv), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_dv), "Dead" = rep(1, n_dv)))
f <- cbind(data[rep(i, n_av), c("Village", "Date", "Treatment", "Hut", "Sleeper", "marker")], data.frame("Location" = rep("Veranda", n_av), "Dead" = rep(0, n_av)))
p <- rbind(a,b,c,d,e,f)
out <- rbind(out, p)
rm(list = c("a","b","c","d","e","f","p"))
}
return(out)
}
gen_mo(m_mos)
mor_reg <- gen_mo(m_mos)
glm(Dead ~ Location, data = mor_reg, family = "binomial")
View(n_mos)
help("case_when")
n_mos <- n_mos %>%
mutate(Nets = case_when(Treatment == "IG2.unwash" ~ "IG2",
Treatment == "P3.unwash" ~ "P3",
Treatment == "P2.unwash" ~ "P2",
Treatment == "IG2.wash" ~ "IG2",
Treatment == "P3.wash" ~ "P3",
Treatment == "UTN" ~ "UTN"))
View(n_mos)
n_mos$Nets <- as.factor(n_mos$Nets)
View(n_mos)
head(n_mos)
