legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
###With number of mosquitoes
bf_mos%>%
dplyr::select(c("Village","Date","Treatment","Location", "Bloodfed", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
right_join(mor_fed, by=c("Village","Date","Treatment","Location", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
ggplot(aes(color = Nets, fill = Nets))+
geom_point(aes(x = Total.Loc, y = Bloodfed))+
facet_grid(vars(Location), vars(WashedStatus))+
labs(title = "Blood-feeding correponding to number of mosquitoes",
x = "Number of mosquitoes", y = "Blood-feeding rate")+
geom_smooth(aes(x = Total.Loc, y = Fed),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
###With number of mosquitoes
bf_mos%>%
dplyr::select(c("Village","Date","Treatment","Location", "Bloodfed", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
right_join(mor_fed, by=c("Village","Date","Treatment","Location", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
ggplot(aes(color = Location, fill = Location))+
geom_point(aes(x = Total.Loc, y = Bloodfed))+
facet_grid(vars(Location), vars(WashedStatus))+
labs(title = "Blood-feeding correponding to number of mosquitoes",
x = "Number of mosquitoes", y = "Blood-feeding rate")+
geom_smooth(aes(x = Total.Loc, y = Fed),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggplot(aes(color = Location, fill = Location))+
geom_point(aes(x = Total.Loc, y = Bloodfed))+
facet_grid(vars(Location), vars(WashedStatus))+
labs(title = "Blood-feeding correponding to number of mosquitoes",
x = "Number of mosquitoes", y = "Blood-feeding rate")+
geom_smooth(aes(x = Total.Loc, y = Fed),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
###With number of mosquitoes
bf_quant <- bf_mos%>%
dplyr::select(c("Village","Date","Treatment","Location", "Bloodfed", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
right_join(mor_fed, by=c("Village","Date","Treatment","Location", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut"))
bf_quant$WashedStatus <-  relevel(as.factor(bf_quant$WashedStatus), ref = "UTN")
ggplot(bf_quant, aes(color = Location, fill = Location))+
geom_point(aes(x = Total.Loc, y = Bloodfed))+
facet_grid(vars(Location), vars(WashedStatus))+
labs(title = "Blood-feeding correponding to number of mosquitoes",
x = "Number of mosquitoes", y = "Blood-feeding rate")+
geom_smooth(aes(x = Total.Loc, y = Fed),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggsave("Blood feeding status by number of mosquitoes.jpeg", device = jpeg,
width = 8, height = 5.5)
ggplot(bf_quant, aes(color = Location, fill = Location))+
geom_point(aes(x = Total.Loc, y = Bloodfed))+
facet_grid(vars(Location), vars(WashedStatus))+
labs(title = "Blood-feeding correponding to number of mosquitoes",
x = "Number of mosquitoes", y = "Blood-feeding rate")+
geom_smooth(aes(x = Total.Loc, y = Fed),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()
ggsave("Blood feeding status by number of mosquitoes.jpeg", device = jpeg,
width = 8, height = 5.5)
source("~/Desktop/Second project/R/0610 loop.R")
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
library(merTools)
library(ggpubr)
library(ggpmisc)
library(fitdistrplus)
library(broom)
View(n_mos)
range(n_mos$Count)
summary(model_5_1)
summary(glmer.nb(formula = Count~Location + WashedStatus+ Location * WashedStatus+ (1|marker), data = n_mos))
summary(model_5_2)
model_5_2 <- glmer.nb(formula = Count~Location + Treatment + (1|marker), data = n_mos)
summary(model_5_2)
summary(model_5_4)
model_5_4 <- glmer.nb(formula = Count~Location + Treatment + Location* Treatment + (1|marker), data = n_mos)
model_5_4 <- update(model_5_4, control = glmerControl(optimizer = "bobyqa"))
summary(model_5_4)
levels(n_mos$Sleeper)
levels(n_mos$Date)
distinct(n_mos$Date)
###1st round trial data in Tengrela
View(Tengrela_R1A_rm)
###1st round trial data in Tengrela
View(Tengrela_R1A_rm)
Tengrela_R1A_rm %>%
group_by(Date)%>%
subset(Sleeper == "Te.S1")
View(Tengrela_R1A_rm %>%
group_by(Date)%>%
subset(Sleeper == "Te.S1"))
View(dataCB)
View(dataCB)
levels(dataCB$Physiology)
levels(as.factor(dataCB$Physiology))
93-36
exp(-3.187)
exp(-3.321)
154-79
mor_fed$WashedStatus <- relevel(as.factor(mor_fed$WashedStatus), ref = "unwashed")
bf_num_loc_Rand <- glmer(Fed~Total.Loc+ Location + WashedStatus + Total.Loc * WashedStatus + (1|Hut)
+ (1|marker)  + (1|Sleeper), data = mor_fed, family =  binomial("logit"))
ss <- getME(bf_num_loc_Rand,c("theta","fixef"))
bf_num_loc_Rand <- update(bf_num_loc_Rand,start=ss,control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=3e5)))
summary(bf_num_loc_Rand)
mor_fed$WashedStatus <- relevel(as.factor(mor_fed$WashedStatus), ref = "UTN")
View(mor_fed)
View(mor_reg)
mf_mos
###Blood feeding rate
mf_mos <- m_mos %>%
dplyr::select(c("Village","Date","Treatment","Location", "Mortality", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
right_join(mor_fed, by=c("Village","Date","Treatment","Location", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut"))
View(mf_mos)
View(bf_mos)
mf_mos <- bf_mos %>%
dplyr::select(c("Village","Date","Treatment","Location", "Bloodfed", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut")) %>%
right_join(mf_mos, by=c("Village","Date","Treatment","Location", "Insecticide",
"Total","WashedStatus","Sleeper","marker","Nets", "Hut"))
View(mf_mos)
View(bf_mos)
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to number of mosquitoes",
x = "Blood-feeding rate", y = "Mortality")+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggsave("Mortality corresponding blood feeding.jpeg", device = jpeg)
summary(glm(Dead~Fed, data = mf_mos, family = binomial("logit")))
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggsave("Mortality corresponding blood feeding.jpeg", device = jpeg)
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggsave("Mortality corresponding blood feeding.jpeg", device = jpeg)
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
scale_y_continuous(labels = c(0, 0.25,0.50,0.75,1))+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
scale_x_continuous(labels = c(0, 0.25,0.50,0.75,1))+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
scale_x_continuous(labels = c(0, 0.25,0.5,0.75,1.0))+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggplot(mf_mos, aes(color = Nets, fill = Nets))+
geom_point(aes(x = Bloodfed, y = Mortality))+
facet_grid(vars(Location), vars(Treatment))+
labs(title = "Mortality correponding to blood-feeding",
x = "Blood-feeding rate", y = "Mortality")+
scale_x_continuous(labels = c(0, 0.25,0.5,0.75,1.0))+
geom_smooth(aes(x = Fed, y = Dead),formula = y~x,method = glm, method.args= list(family="binomial"))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12))
ggsave("Mortality corresponding blood feeding.jpeg", device = jpeg)
exp(1.635)
mor_fed_1 <- glm(Dead ~ Fed + Location + Fed * Location + Treatment + Location * Treatment,
data = mor_fed, family = binomial("logit"))
summary(mor_fed_1)
summary(mor_fed_0)
mor_fed_1 <- glm(Dead ~ Fed + Location + Fed * Location + Treatment + Location * Treatment,
data = mor_fed, family = binomial("logit"))
summary(mor_fed_1)
mor_fed_1_obs <- glmer(Dead ~ Fed + Location + Fed*Location + Treatment + Location * Treatment +
(1 | marker), data = mor_fed, family = binomial("logit"))
mor_fed_1_obs <- update(mor_fed_1_obs, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_1_obs)
mor_fed_1_hut <- glmer(Dead ~ Fed + Location +Fed*Location + Treatment + Location * Treatment +
(1 | Hut), data = mor_fed, family = binomial("logit"))
mor_fed_1_hut <- update(mor_fed_1_hut, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_1_hut)
mor_fed_1_Slp <- glmer(Dead ~ Fed + Location +Fed *Location + Treatment + Location * Treatment +
(1 | Sleeper), data = mor_fed, family = binomial("logit"))
summary(mor_fed_1_Slp)
mor_fed_1_Slp <- update(mor_fed_1_Slp, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_1_Slp)
mor_fed_obs_1_Slp <- glmer(Dead ~ Fed + Location + Fed*Location + Treatment + Location * Treatment +
(1 | marker)+ (1 | Sleeper), data = mor_fed, family = binomial("logit"))
mor_fed_obs_1_Slp <- update(mor_fed_obs_1_Slp, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_obs_1_Slp)
mor_fed_obs_1_Hut <- glmer(Dead ~ Fed + Location + Fed*Location + Treatment + Location * Treatment +
(1 | marker)+ (1 | Hut), data = mor_fed, family = binomial("logit"))
mor_fed_obs_1_Hut <- update(mor_fed_obs_1_Hut, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_obs_1_Hut)
mor_fed_Hut_1_Slp <- glmer(Dead ~ Fed + Location + Fed*Location + Treatment + Location * Treatment +
(1 | Sleeper)+ (1 | Hut), data = mor_fed, family = binomial("logit"))
mor_fed_Hut_1_Slp <- update(mor_fed_Hut_1_Slp, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_Hut_1_Slp)
mor_fed_Hut_1_Slp <- glmer(Dead ~ Fed + Location + Fed*Location + Treatment + Location * Treatment +
(1 | Sleeper)+ (1 | Hut), data = mor_fed, family = binomial("logit"))
summary(mor_fed_Hut_1_Slp)
summary(mor_fed_1_rand)
mor_fed_1_rand <- glmer(Dead ~ Fed + Location +Fed*Location + Treatment + Location * Treatment + (1 | marker) +
(1 | Sleeper)+ (1 | Hut), data = mor_fed, family = binomial("logit"))
mor_fed_1_rand <- update(mor_fed_1_rand, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_1_rand)
mor_fed$Location <- relevel(as.factor(mor_fed$Location), ref = "UTN")
mor_fed$Location <- relevel(as.factor(mor_fed$Location), ref = "Room")
mor_fed_1_rand <- glmer(Dead ~ Fed + Location +Fed*Location + Treatment + Location * Treatment + (1 | marker) +
(1 | Sleeper)+ (1 | Hut), data = mor_fed, family = binomial("logit"))
mor_fed_1_rand <- update(mor_fed_1_rand, control = glmerControl(optimizer = "bobyqa"))
summary(mor_fed_1_rand)
View(n_mos)
multimod_Loc_Tot <- multinom(Location ~ Total, data = n_mos)
####glmms
library(lme4)
library(tidyverse)
library(DHARMa)
library(lubridate)
library(MASS)
library(merTools)
library(ggpubr)
library(ggpmisc)
library(nnet)
library(cowplot)
multimod_Loc_Tot <- multinom(Location ~ Total, data = n_mos)
summary(multimod_Loc_Tot)
multimod_Loc_Count <- multinom(Location ~ Count, data = n_mos)
summary(multimod_Loc_Count)
summary(multimod_Tr_Loc)
model_tot_Loc <- glm(Count~Total + Location)
summary(model_tot_Loc)
model_tot_Loc <- glm(Count~Total + Location, data = n_mos)
summary(model_tot_Loc)
multimod_Loc_Cou_tot <- multinom(Location ~ Count + Total, data = n_mos)
summary(multimod_Loc_Cou_tot)
p_multimod_Tr_Loc <- (1-pnorm(abs(z_multimod_Tr_Loc),0,1))*2
p_multimod_Tr_Loc
z_model_tot_Loc <- summary(model_tot_Loc)$coefficients/summary(model_tot_Loc)$standard.errors
p_model_tot_Loc <- (1-pnorm(abs(z_model_tot_Loc),0,1))*2
p_model_tot_Loc
z_model_tot_Loc
model_tot_Loc <- glm(Count~Total + Location, data = n_mos)
summary(model_tot_Loc)
z_model_tot_Loc <- summary(multimod_Loc_Cou_tot)$coefficients/summary(multimod_Loc_Cou_tot)$standard.errors
p_model_tot_Loc <- (1-pnorm(abs(z_model_tot_Loc),0,1))*2
p_model_tot_Loc
model_tot_l <- glm(Count~Location + Total, data = n_mos)
summary(model_tot_l)
model_tot_l <- glm(Count~Location + Total + Location*Total,  data = n_mos)
summary(model_tot_l)
summary(mor_fed_1_rand)
mor_fed$Location <- relevel(as.factor(mor_fed$Location), ref = "Net")
mor_fed_num_ms_1 <- glmer(Dead~Fed + Location+Fed*Location + Treatment + Location * Treatment + Total.Loc + Total.Loc*Treatment +
(1 | marker)+ (1 | Sleeper), data = mor_fed, family = binomial("logit"))
ss <- getME(mor_fed_num_ms_1,c("theta","fixef"))
mor_fed_num_ms_1 <- update(mor_fed_num_ms_1,start=ss,control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
ss <- getME(mor_fed_num_ms_1,c("theta","fixef"))
mor_fed_num_ms_1 <- update(mor_fed_num_ms_1,start=ss,control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
summary(mor_fed_num_ms_1)
summary(mor_fed_num_ms)
f <- c("data/FW_EHT_data_analysis/19_09_to_26_10_20_Tengrela.xlsx",
"data/FW_EHT_data_analysis/16_08_to_18_08_20_Tiefora.xlsx",
"data/FW_EHT_data_analysis/16_08_to_18_08_20_Tengrela.xlsx", # max and min temp - actually NA
"data/FW_EHT_data_analysis/19_09_to_26_10_20_Tiefora.xlsx",
"data/FW_EHT_data_analysis/31_10_to_1_12_20_Tiefora.xlsx",
"data/FW_EHT_data_analysis/31_10_to_09_11_20_Tengrela.xlsx")
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
library(tidyverse); library(rio); library(suncalc); library(chillR); library(lubridate); library(zoo);
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
# create a list with the names of all the temperature data files
f <- c("~/Desktop/Second project/temp data/19_09_to_26_10_20_Tengrela.xlsx",
"~/Desktop/Second project/temp data/16_08_to_18_08_20_Tiefora.xlsx",
"~/Desktop/Second project/temp data/16_08_to_18_08_20_Tengrela.xlsx", # max and min temp - actually NA
"~/Desktop/Second project/temp data/19_09_to_26_10_20_Tiefora.xlsx",
"~/Desktop/Second project/temp data/31_10_to_1_12_20_Tiefora.xlsx",
"~/Desktop/Second project/temp data/31_10_to_09_11_20_Tengrela.xlsx")
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
# create a list with the names of all the temperature data files
f <- c("~/Desktop/Second project/R/temp data/19_09_to_26_10_20_Tengrela.xlsx",
"~/Desktop/Second project/R/temp data/16_08_to_18_08_20_Tiefora.xlsx",
"~/Desktop/Second project/R/temp data/16_08_to_18_08_20_Tengrela.xlsx", # max and min temp - actually NA
"~/Desktop/Second project/R/temp data/19_09_to_26_10_20_Tiefora.xlsx",
"~/Desktop/Second project/R/temp data/31_10_to_1_12_20_Tiefora.xlsx",
"~/Desktop/Second project/R/temp data/31_10_to_09_11_20_Tengrela.xlsx")
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
# loop to read in each sheet from each file and summarise the date and times in different ways
temp_data <- rbind(rio::import_list(file = "~/Desktop/Second project/R/temp data/16_08_to_18_08_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "~/Desktop/Second project/R/temp data/16_08_to_18_08_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "~/Desktop/Second project/R/temp data/19_09_to_26_10_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "~/Desktop/Second project/R/temp data/19_09_to_26_10_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "~/Desktop/Second project/R/temp data/31_10_to_1_12_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "~/Desktop/Second project/R/temp data/31_10_to_09_11_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE)) %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m-%d %H:%M:%S", tz = "UTC"), # ignore daylight savings
year = year(Date),
month = month(Date),
day = day(Date),
hour = hour(Date),
date = as.Date(Date),
quarter = as.yearqtr(date, format =  "%Y-%m-%d %H:%M:%S"),
f_date = floor_date(Date, unit = "hour"))
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
library(readxl)
X16_08_to_18_08_20_Tengrela <- read_excel("temp data/16_08_to_18_08_20_Tengrela.xlsx")
View(X16_08_to_18_08_20_Tengrela)
rm(X16_08_to_18_08_20_Tengrela)
# create a list with the names of all the temperature data files
f <- c("temp data/19_09_to_26_10_20_Tengrela.xlsx",
"temp data/16_08_to_18_08_20_Tiefora.xlsx",
"temp data/16_08_to_18_08_20_Tengrela.xlsx", # max and min temp - actually NA
"temp data/19_09_to_26_10_20_Tiefora.xlsx",
"temp data/31_10_to_1_12_20_Tiefora.xlsx",
"temp data/31_10_to_09_11_20_Tengrela.xlsx")
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
library(chillR);
getwd()
# create a list with the names of all the temperature data files
f <- c("temp data/19_09_to_26_10_20_Tengrela.xlsx",
"temp data/16_08_to_18_08_20_Tiefora.xlsx",
"temp data/16_08_to_18_08_20_Tengrela.xlsx", # max and min temp - actually NA
"temp data/19_09_to_26_10_20_Tiefora.xlsx",
"temp data/31_10_to_1_12_20_Tiefora.xlsx",
"temp data/31_10_to_09_11_20_Tengrela.xlsx")
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
# loop to print the number of missing values in each file
lapply(f, function(file_){
data <- import_list(file = file_, setclass = "tbl_df", rbind = TRUE)
print(c(paste0("Date NA:", sum(is.na(data$Date))),
paste0("Temp NA:", sum(is.na(data$Temperature))),
paste0("Max temp NA:", sum(is.na(data$`Maximum Temperature`))),
paste0("Min temp NA:", sum(is.na(data$`Minimum Temperature`)))))
})
library(chillR)
install.packages("chillR")
install.packages("terra")
# loop to read in each sheet from each file and summarise the date and times in different ways
temp_data <- rbind(rio::import_list(file = "temp data/16_08_to_18_08_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "temp data/16_08_to_18_08_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "temp data/19_09_to_26_10_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "temp data/19_09_to_26_10_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "temp data/31_10_to_1_12_20_Tiefora.xlsx", setclass = "tbl_df", rbind = TRUE),
rio::import_list(file = "temp data/31_10_to_09_11_20_Tengrela.xlsx", setclass = "tbl_df", rbind = TRUE)) %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m-%d %H:%M:%S", tz = "UTC"), # ignore daylight savings
year = year(Date),
month = month(Date),
day = day(Date),
hour = hour(Date),
date = as.Date(Date),
quarter = as.yearqtr(date, format =  "%Y-%m-%d %H:%M:%S"),
f_date = floor_date(Date, unit = "hour"))
library(rgdal)
install.package("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
version
install.packages("/Users/YaodeFeng/Desktop/rgdal_1.5-32.tar")
install.packages("/Users/YaodeFeng/Desktop/rgdal_1.5-32.tar")
install.packages("rgdal")
library(chillR);
library(chillR)
install.packages("fields")
install.packages("gdal")
install.packages("rgdal")
